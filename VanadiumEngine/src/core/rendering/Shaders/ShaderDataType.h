#pragma once
#include "GLCommon.h"
#include "GLAD/glad.h"

enum ShaderDataType
{
	Void = 0,
	Bool = GL_BOOL,
	Int = GL_INT,
	UInt = GL_UNSIGNED_INT,
	Float = GL_FLOAT,
	Double = GL_DOUBLE,

	// Vectors
	Bool2 = GL_BOOL_VEC2, Bool3 = GL_BOOL_VEC3, Bool4 = GL_BOOL_VEC4,
	Int2 = GL_INT_VEC2, Int3 = GL_INT_VEC3, Int4 = GL_INT_VEC4,
	UInt2 = GL_UNSIGNED_INT_VEC2, UInt3 = GL_UNSIGNED_INT_VEC3, UInt4 = GL_UNSIGNED_INT_VEC4,
	Float2 = GL_FLOAT_VEC2, Float3 = GL_FLOAT_VEC3, Float4 = GL_FLOAT_VEC4,
	Double2 = GL_DOUBLE_VEC2, Double3 = GL_DOUBLE_VEC3, Double4 = GL_DOUBLE_VEC4,

	// Matrices
	Mat2 = GL_FLOAT_MAT2, Mat2x3 = GL_FLOAT_MAT2x3, Mat2x4 = GL_FLOAT_MAT2x4,
	Mat3 = GL_FLOAT_MAT3, Mat3x2 = GL_FLOAT_MAT3x2, Mat3x4 = GL_FLOAT_MAT3x4,
	Mat4 = GL_FLOAT_MAT4, Mat4x2 = GL_FLOAT_MAT4x2, Mat4x3 = GL_FLOAT_MAT4x3,
	DMat2 = GL_DOUBLE_MAT2, DMat2x3 = GL_DOUBLE_MAT2x3, DMat2x4 = GL_DOUBLE_MAT2x4,
	DMat3 = GL_DOUBLE_MAT3, DMat3x2 = GL_DOUBLE_MAT3x2, DMat3x4 = GL_DOUBLE_MAT3x4,
	DMat4 = GL_DOUBLE_MAT4, DMat4x2 = GL_DOUBLE_MAT4x2, DMat4x3 = GL_DOUBLE_MAT4x3,

	// Samplers (common types)
	Sampler1D = GL_SAMPLER_1D, Sampler2D = GL_SAMPLER_2D, Sampler3D = GL_SAMPLER_3D,
	SamplerCube = GL_SAMPLER_CUBE, Sampler2DRect = GL_SAMPLER_2D_RECT,
	Sampler1DShadow = GL_SAMPLER_1D_SHADOW, Sampler2DShadow = GL_SAMPLER_2D_SHADOW, SamplerCubeShadow = GL_SAMPLER_CUBE_SHADOW, Sampler2DRectShadow = GL_SAMPLER_2D_RECT_SHADOW,
	Sampler1DArray = GL_SAMPLER_1D_ARRAY, Sampler2DArray = GL_SAMPLER_2D_ARRAY, Sampler1DArrayShadow = GL_SAMPLER_1D_ARRAY_SHADOW, Sampler2DArrayShadow = GL_SAMPLER_2D_ARRAY_SHADOW,
	SamplerBuffer = GL_SAMPLER_BUFFER, Sampler2DMS = GL_SAMPLER_2D_MULTISAMPLE, Sampler2DMSArray = GL_SAMPLER_2D_MULTISAMPLE_ARRAY,
	ISampler1D = GL_INT_SAMPLER_1D, ISampler2D = GL_INT_SAMPLER_2D, ISampler3D = GL_INT_SAMPLER_3D, ISamplerCube = GL_INT_SAMPLER_CUBE, ISampler2DRect = GL_INT_SAMPLER_2D_RECT,
	ISampler1DArray = GL_INT_SAMPLER_1D_ARRAY, ISampler2DArray = GL_INT_SAMPLER_2D_ARRAY, ISamplerBuffer = GL_INT_SAMPLER_BUFFER, ISampler2DMS = GL_INT_SAMPLER_2D_MULTISAMPLE, ISampler2DMSArray = GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
	USampler1D = GL_UNSIGNED_INT_SAMPLER_1D, USampler2D = GL_UNSIGNED_INT_SAMPLER_2D, USampler3D = GL_UNSIGNED_INT_SAMPLER_3D, USamplerCube = GL_UNSIGNED_INT_SAMPLER_CUBE, USampler2DRect = GL_UNSIGNED_INT_SAMPLER_2D_RECT,
	USampler1DArray = GL_UNSIGNED_INT_SAMPLER_1D_ARRAY, USampler2DArray = GL_UNSIGNED_INT_SAMPLER_2D_ARRAY, USamplerBuffer = GL_UNSIGNED_INT_SAMPLER_BUFFER, USampler2DMS = GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE, USampler2DMSArray = GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,

	// Images (GLSL 4.2+)
	Image1D = GL_IMAGE_1D, Image2D = GL_IMAGE_2D, Image3D = GL_IMAGE_3D, ImageCube = GL_IMAGE_CUBE, Image2DRect = GL_IMAGE_2D_RECT,
	Image1DArray = GL_IMAGE_1D_ARRAY, Image2DArray = GL_IMAGE_2D_ARRAY, ImageBuffer = GL_IMAGE_BUFFER, Image2DMS = GL_IMAGE_2D_MULTISAMPLE, Image2DMSArray = GL_IMAGE_2D_MULTISAMPLE_ARRAY,
	IImage1D = GL_INT_IMAGE_1D, IImage2D = GL_INT_IMAGE_2D, IImage3D = GL_INT_IMAGE_3D, IImageCube = GL_INT_IMAGE_CUBE, IImage2DRect = GL_INT_IMAGE_2D_RECT,
	IImage1DArray = GL_INT_IMAGE_1D_ARRAY, IImage2DArray = GL_INT_IMAGE_2D_ARRAY, IImageBuffer = GL_INT_IMAGE_BUFFER, IImage2DMS = GL_INT_IMAGE_2D_MULTISAMPLE, IImage2DMSArray = GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY,
	UImage1D = GL_UNSIGNED_INT_IMAGE_1D, UImage2D = GL_UNSIGNED_INT_IMAGE_2D, UImage3D = GL_UNSIGNED_INT_IMAGE_3D, UImageCube = GL_UNSIGNED_INT_IMAGE_CUBE, UImage2DRect = GL_UNSIGNED_INT_IMAGE_2D_RECT,
	UImage1DArray = GL_UNSIGNED_INT_IMAGE_1D_ARRAY, UImage2DArray = GL_UNSIGNED_INT_IMAGE_2D_ARRAY, UImageBuffer = GL_UNSIGNED_INT_IMAGE_BUFFER, UImage2DMS = GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE, UImage2DMSArray = GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY,
};